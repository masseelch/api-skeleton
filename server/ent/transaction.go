// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	server "skeleton"
	"skeleton/ent/account"
	"skeleton/ent/transaction"
	"skeleton/ent/user"
	"time"

	"github.com/facebook/ent/dialect/sql"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `groups:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty" groups:"transaction:list"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty" groups:"transaction:list"`
	// Amount holds the value of the "amount" field.
	Amount server.Money `json:"amount,omitempty" groups:"transaction:list"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty" groups:"transaction:list"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionQuery when eager-loading is set.
	Edges                TransactionEdges `json:"edges" groups:"transaction:list"`
	account_transactions *int
	user_transactions    *int
}

// TransactionEdges holds the relations/edges for other nodes in the graph.
type TransactionEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty" groups:"transaction:list"`
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty" groups:"transaction:list"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty" groups:"transaction:list"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[1] {
		if e.Account == nil {
			// The edge account was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e TransactionEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[2] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // date
		&sql.NullInt64{},  // amount
		&sql.NullString{}, // title
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Transaction) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // account_transactions
		&sql.NullInt64{}, // user_transactions
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(values ...interface{}) error {
	if m, n := len(values), len(transaction.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field date", values[0])
	} else if value.Valid {
		t.Date = value.Time
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field amount", values[1])
	} else if value.Valid {
		t.Amount = server.Money(value.Int64)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[2])
	} else if value.Valid {
		t.Title = value.String
	}
	values = values[3:]
	if len(values) == len(transaction.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field account_transactions", value)
		} else if value.Valid {
			t.account_transactions = new(int)
			*t.account_transactions = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_transactions", value)
		} else if value.Valid {
			t.user_transactions = new(int)
			*t.user_transactions = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the Transaction.
func (t *Transaction) QueryUser() *UserQuery {
	return (&TransactionClient{config: t.config}).QueryUser(t)
}

// QueryAccount queries the account edge of the Transaction.
func (t *Transaction) QueryAccount() *AccountQuery {
	return (&TransactionClient{config: t.config}).QueryAccount(t)
}

// QueryTags queries the tags edge of the Transaction.
func (t *Transaction) QueryTags() *TagQuery {
	return (&TransactionClient{config: t.config}).QueryTags(t)
}

// Update returns a builder for updating this Transaction.
// Note that, you need to call Transaction.Unwrap() before calling this method, if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return (&TransactionClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// Get rid of the fmt.Stringer implementation since it breaks liip/sheriff.
// This lines have to be here since template/text does skip empty templates.

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction

func (t Transactions) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
