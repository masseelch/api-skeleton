// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	server "skeleton"
	"skeleton/ent/tag"

	"github.com/facebook/ent/dialect/sql"
)

// Tag is the model entity for the Tag schema.
type Tag struct {
	config `groups:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty" groups:"tag:list,tag:read"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty" groups:"tag:list,tag:read"`
	// Color holds the value of the "color" field.
	Color server.Color `json:"color,omitempty" groups:"tag:list,tag:read"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TagQuery when eager-loading is set.
	Edges TagEdges `json:"edges"`
}

// TagEdges holds the relations/edges for other nodes in the graph.
type TagEdges struct {
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty" groups:"tag:read"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e TagEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[0] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tag) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // title
		&sql.NullInt64{},  // color
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tag fields.
func (t *Tag) assignValues(values ...interface{}) error {
	if m, n := len(values), len(tag.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[0])
	} else if value.Valid {
		t.Title = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field color", values[1])
	} else if value.Valid {
		t.Color = server.Color(value.Int64)
	}
	return nil
}

// QueryTransactions queries the transactions edge of the Tag.
func (t *Tag) QueryTransactions() *TransactionQuery {
	return (&TagClient{config: t.config}).QueryTransactions(t)
}

// Update returns a builder for updating this Tag.
// Note that, you need to call Tag.Unwrap() before calling this method, if this Tag
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tag) Update() *TagUpdateOne {
	return (&TagClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Tag) Unwrap() *Tag {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tag is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// Get rid of the fmt.Stringer implementation since it breaks liip/sheriff.
// This lines have to be here since template/text does skip empty templates.

// Tags is a parsable slice of Tag.
type Tags []*Tag

func (t Tags) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
