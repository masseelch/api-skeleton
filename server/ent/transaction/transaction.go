// Code generated by entc, DO NOT EDIT.

package transaction

const (
	// Label holds the string label denoting the transaction type in the database.
	Label = "transaction"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"

	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeAccount holds the string denoting the account edge name in mutations.
	EdgeAccount = "account"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"

	// Table holds the table name of the transaction in the database.
	Table = "transactions"
	// UserTable is the table the holds the user relation/edge.
	UserTable = "transactions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_transactions"
	// AccountTable is the table the holds the account relation/edge.
	AccountTable = "transactions"
	// AccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountInverseTable = "accounts"
	// AccountColumn is the table column denoting the account relation/edge.
	AccountColumn = "account_transactions"
	// TagsTable is the table the holds the tags relation/edge. The primary key declared below.
	TagsTable = "transaction_tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
)

// Columns holds all SQL columns for transaction fields.
var Columns = []string{
	FieldID,
	FieldDate,
	FieldAmount,
	FieldTitle,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Transaction type.
var ForeignKeys = []string{
	"account_transactions",
	"user_transactions",
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"transaction_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
